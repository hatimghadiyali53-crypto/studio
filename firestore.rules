/**
 * @fileoverview Firestore Security Rules for Paradise ScoopSmart.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure access control, focusing on owner-based and role-based restrictions.
 * Data validation is relaxed to allow for rapid prototyping and schema evolution.
 *
 * Data Structure:
 * - /employees/{employeeId}: Stores employee profiles. Only accessible to the employee themselves.
 * - /tasks/{taskId}: Stores tasks, accessible to any signed-in user.
 * - /inventoryItems/{inventoryItemId}: Stores inventory items. Accessible to any signed-in user.
 * - /roster/{rosterId}: Stores roster shifts. Accessible to any signed-in user.
 * - /attendance/{attendanceId}: Stores attendance records. Accessible to any signed-in user.
 *
 * Key Security Decisions:
 * - Employees can only read/write their own profile.
 * - User listing is generally disallowed to protect privacy.
 * - Read access to inventory, roster, and attendance is public for signed-in users.
 * - Data validation is minimal in the prototype phase, focusing on authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to employee profiles.
     * @path /employees/{employeeId}
     * @allow (get) User with UID 'employeeId' can read their own profile.
     * @allow (create) User with UID 'employeeId' can create their own profile.
     * @allow (update) User with UID 'employeeId' can update their own profile.
     * @allow (delete) User with UID 'employeeId' can delete their own profile.
     * @deny (get) User with UID 'otherUserId' cannot read employee profile of 'employeeId'.
     * @principle Enforces document ownership for employee profiles.
     */
    match /employees/{employeeId} {
      allow get: if isSignedIn() && isOwner(employeeId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(employeeId);
      allow update: if isSignedIn() && isExistingOwner(employeeId);
      allow delete: if isSignedIn() && isExistingOwner(employeeId);
    }

    /**
     * @description Controls access to tasks.
     * @path /tasks/{taskId}
     * @allow (get) Any signed-in user can read a task.
     * @allow (create) Any signed-in user can create a task.
     * @allow (update) Any signed-in user can update a task.
     * @allow (delete) Any signed-in user can delete a task.
     * @deny (create) Unauthenticated user cannot create a task.
     * @principle Allows signed-in users to manage tasks.
     */
    match /tasks/{taskId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Controls access to inventory items.
     * @path /inventoryItems/{inventoryItemId}
     * @allow (get) Any signed-in user can read an inventory item.
     * @allow (create) Any signed-in user can create an inventory item.
     * @allow (update) Any signed-in user can update an inventory item.
     * @allow (delete) Any signed-in user can delete an inventory item.
     * @deny (create) Unauthenticated user cannot create an inventory item.
     * @principle Allows signed-in users to manage inventory.
     */
    match /inventoryItems/{inventoryItemId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Controls access to roster shifts.
     * @path /roster/{rosterId}
     * @allow (get) Any signed-in user can read a roster shift.
     * @allow (create) Any signed-in user can create a roster shift.
     * @allow (update) Any signed-in user can update a roster shift.
     * @allow (delete) Any signed-in user can delete a roster shift.
     * @deny (create) Unauthenticated user cannot create a roster shift.
     * @principle Allows signed-in users to manage the roster.
     */
    match /roster/{rosterId} {
        allow get: if isSignedIn();
        allow list: if isSignedIn();
        allow create: if isSignedIn();
        allow update: if isSignedIn();
        allow delete: if isSignedIn();
    }

    /**
     * @description Controls access to attendance records.
     * @path /attendance/{attendanceId}
     * @allow (get) Any signed-in user can read an attendance record.
     * @allow (create) Any signed-in user can create an attendance record.
     * @allow (update) Any signed-in user can update an attendance record.
     * @allow (delete) Any signed-in user can delete an attendance record.
     * @deny (create) Unauthenticated user cannot create an attendance record.
     * @principle Allows signed-in users to manage attendance.
     */
    match /attendance/{attendanceId} {
        allow get: if isSignedIn();
        allow list: if isSignedIn();
        allow create: if isSignedIn();
        allow update: if isSignedIn();
        allow delete: if isSignedIn();
    }
  }

  // Helper function to determine if the user is signed in.
  function isSignedIn() {
    return request.auth != null;
  }

  // Helper function to determine if the user is the owner of the document.
  function isOwner(userId) {
    return request.auth.uid == userId;
  }

    // Helper function to determine if the user is the owner of the document and that the resource exists.
  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}