/**
 * @fileoverview Firestore Security Rules for Paradise ScoopSmart.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for employee-related data
 * and adopts a public-read, owner-write model for other collections. All write
 * operations are protected by authentication checks. Data structures do not use custom claims.
 *
 * Data Structure:
 * - /employees/{employeeId}: Employee profiles, accessible only to the owning user.
 * - /rosters/{rosterId}/shifts/{shiftId}: Shifts nested under rosters.
 * - /inventoryItems/{inventoryItemId}/inventoryLogs/{inventoryLogId}: Inventory logs nested under inventory items.
 * - /tasks/{taskId}: Globally available tasks.
 * - /employees/{employeeId}/employeeTasks/{employeeTaskId}: Tasks assigned to specific employees.
 * - /shiftSwapRequests/{shiftSwapRequestId}: Requests for shift swaps between employees.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Public read access is granted to inventory items and logs, and tasks.
 * - Default security posture for ambiguous relationships is strict owner-only access.
 *
 * Denormalization for Authorization:
 * - Shifts are designed to include denormalized employeeId for simple shift retrieval and management.
 * - ShiftSwapRequests are designed to include denormalized requestingEmployeeId and acceptingEmployeeId for easy request retrieval and management.
 *
 * Structural Segregation:
 * - Private employee data is stored under /employees/{employeeId}, while shared data (e.g., tasks) resides in top-level collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to employee profiles. Only the owning user can read or write their profile.
     * @path /employees/{employeeId}
     * @allow (create) User abc can create their own profile with matching ID.
     * @deny (create) User def cannot create a profile with ID abc.
     * @allow (get) User abc can read their own profile.
     * @deny (get) User def cannot read user abc's profile.
     * @allow (update) User abc can update their own profile.
     * @deny (update) User def cannot update user abc's profile.
     * @allow (delete) User abc can delete their own profile.
     * @deny (delete) User def cannot delete user abc's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /employees/{employeeId} {
      allow get: if isSignedIn() && isOwner(employeeId);
      allow list: if false; // User listing is explicitly disallowed.
      allow create: if isSignedIn() && isOwner(employeeId) && request.resource.data.id == employeeId;
      allow update: if isSignedIn() && isExistingOwner(employeeId) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(employeeId);
    }

    /**
     * @description Controls access to employee rosters.
     * @path /rosters/{rosterId}
     * @allow (get) Anyone can read a roster.
     * @deny (create) No direct creation allowed
     * @allow (list) Anyone can list rosters.
     * @deny (update) Updating is not allowed
     * @deny (delete) Deleting is not allowed
     * @principle Public read access with no write operations.
     */
    match /rosters/{rosterId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to shifts associated with a roster.
     * @path /rosters/{rosterId}/shifts/{shiftId}
     * @allow (get) Anyone can read a shift.
     * @allow (create) Anyone can create a shift.
     * @allow (list) Anyone can list shifts.
     * @allow (update) Anyone can update a shift.
     * @allow (delete) Anyone can delete a shift.
     * @principle Public read access with no write operations.
     */
    match /rosters/{rosterId}/shifts/{shiftId} {
      allow get, list: if true;
      allow create, update, delete: if true;
    }

    /**
     * @description Controls access to inventory items.
     * @path /inventoryItems/{inventoryItemId}
     * @allow (get) Anyone can read an inventory item.
     * @allow (create) Anyone can create an inventory item.
     * @allow (list) Anyone can list inventory items.
     * @allow (update) Anyone can update an inventory item.
     * @allow (delete) Anyone can delete an inventory item.
     * @principle Public read and write access.
     */
    match /inventoryItems/{inventoryItemId} {
      allow get, list: if true;
      allow create, update, delete: if true;
    }

    /**
     * @description Controls access to inventory logs for each item.
     * @path /inventoryItems/{inventoryItemId}/inventoryLogs/{inventoryLogId}
     * @allow (get) Anyone can read an inventory log.
     * @allow (create) Anyone can create an inventory log.
     * @allow (list) Anyone can list inventory logs.
     * @allow (update) Anyone can update an inventory log.
     * @allow (delete) Anyone can delete an inventory log.
     * @principle Public read and write access.
     */
    match /inventoryItems/{inventoryItemId}/inventoryLogs/{inventoryLogId} {
      allow get, list: if true;
      allow create, update, delete: if true;
    }

    /**
     * @description Controls access to global tasks.
     * @path /tasks/{taskId}
     * @allow (get) Anyone can read a task.
     * @allow (create) Anyone can create a task.
     * @allow (list) Anyone can list tasks.
     * @allow (update) Anyone can update a task.
     * @allow (delete) Anyone can delete a task.
     * @principle Public read and write access.
     */
    match /tasks/{taskId} {
      allow get, list: if true;
      allow create, update, delete: if true;
    }

    /**
     * @description Controls access to tasks assigned to specific employees. Only the owning user can manage their tasks.
     * @path /employees/{employeeId}/employeeTasks/{employeeTaskId}
     * @allow (create) User abc can create a task for themselves with matching employeeId.
     * @deny (create) User def cannot create a task for user abc.
     * @allow (get) User abc can read their own tasks.
     * @deny (get) User def cannot read user abc's tasks.
     * @allow (update) User abc can update their own tasks.
     * @deny (update) User def cannot update user abc's tasks.
     * @allow (delete) User abc can delete their own tasks.
     * @deny (delete) User def cannot delete user abc's tasks.
     * @principle Enforces document ownership for all operations.
     */
    match /employees/{employeeId}/employeeTasks/{employeeTaskId} {
      allow get, list: if isSignedIn() && isOwner(employeeId);
      allow create: if isSignedIn() && isOwner(employeeId) && request.resource.data.employeeId == employeeId;
      allow update: if isSignedIn() && isExistingOwner(employeeId) && request.resource.data.employeeId == resource.data.employeeId;
      allow delete: if isSignedIn() && isExistingOwner(employeeId);
    }

     /**
     * @description Controls access to shift swap requests.
     * @path /shiftSwapRequests/{shiftSwapRequestId}
     * @allow (get) Anyone can read a shift swap request.
     * @allow (create) Anyone can create a shift swap request.
     * @allow (list) Anyone can list shift swap requests.
     * @allow (update) Anyone can update a shift swap request.
     * @allow (delete) Anyone can delete a shift swap request.
     * @principle Public read and write access.
     */
    match /shiftSwapRequests/{shiftSwapRequestId} {
      allow get, list: if true;
      allow create, update, delete: if true;
    }


    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}