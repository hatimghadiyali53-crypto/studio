/**
 * @fileoverview Firestore Security Rules for Paradise ScoopSmart.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for employee-related data,
 * while allowing more open access to shared or global data like rosters, tasks, and inventory.
 * The primary goal is to protect user data and ensure only authorized users can modify sensitive information.
 *
 * Data Structure:
 * - `/employees/{employeeId}`: Employee profiles, accessible only by the employee themselves.
 * - `/rosters/{rosterId}`: Rosters, with open read access.
 * - `/rosters/{rosterId}/shifts/{shiftId}`: Shifts associated with rosters.
 * - `/inventoryItems/{inventoryItemId}`: Inventory items, with open read access.
 * - `/inventoryItems/{inventoryItemId}/inventoryLogs/{inventoryLogId}`: Inventory logs, open read.
 * - `/tasks/{taskId}`: Global tasks, with open read access.
 * - `/employees/{employeeId}/employeeTasks/{employeeTaskId}`: Tasks assigned to employees, accessible only by the employee.
 * - `/shiftSwapRequests/{shiftSwapRequestId}`: Shift swap requests.
 *
 * Key Security Decisions:
 * - User data (under `/employees/{employeeId}`) is strictly controlled, using the "Ownership" pattern.
 * - Public data (rosters, inventory, tasks) is readable by anyone, but write access is restricted to prevent unauthorized modifications.
 * - Listing operations are secured based on the data's privacy level. User-specific data is listable only by the owner, while public data is generally listable by anyone.
 *
 * Denormalization for Authorization:
 * - The `shifts` collection denormalizes `employeeId` to avoid `get()` calls when checking shift assignments.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows employees to manage their own profile data.
     * @path /employees/{employeeId}
     * @allow (create) User with uid 'user_abc' can create a profile if employeeId == 'user_abc'.
     * @allow (get) User with uid 'user_abc' can read their own profile (employeeId == 'user_abc').
     * @allow (update) User with uid 'user_abc' can update their profile (employeeId == 'user_abc').
     * @allow (delete) User with uid 'user_abc' can delete their own profile (employeeId == 'user_abc').
     * @deny (create) User with uid 'user_def' cannot create a profile for employeeId 'user_abc'.
     * @deny (get) User with uid 'user_def' cannot read profile for employeeId 'user_abc'.
     * @deny (update) User with uid 'user_def' cannot update profile for employeeId 'user_abc'.
     * @deny (delete) User with uid 'user_def' cannot delete profile for employeeId 'user_abc'.
     * @principle Enforces document ownership for writes.
     */
    match /employees/{employeeId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if true;
      allow list: if false; // Explicitly deny listing all employees.

      allow create: if isSignedIn() && isOwner(employeeId) && request.resource.data.id == employeeId;
      allow update: if isExistingOwner(employeeId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(employeeId);
    }

    /**
     * @description Allows anyone to read rosters, but restricts writes.
     * @path /rosters/{rosterId}
     * @allow (get) Any user can read a roster.
     * @allow (list) Any user can list rosters.
     * @deny (create) No one can create a roster (TODO: Add role-based access).
     * @deny (update) No one can update a roster (TODO: Add role-based access).
     * @deny (delete) No one can delete a roster (TODO: Add role-based access).
     * @principle Allows public read access with restricted writes.
     */
    match /rosters/{rosterId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add role-based access.
      allow update: if false; // TODO: Add role-based access.
      allow delete: if false; // TODO: Add role-based access.
    }

    /**
     * @description Manages shifts within rosters, accessible with roster-level permissions.
     * @path /rosters/{rosterId}/shifts/{shiftId}
     * @allow (get) Any user can read a shift.
     * @allow (list) Any user can list shifts within a roster.
     * @deny (create) No one can create a shift (TODO: Add role-based access).
     * @deny (update) No one can update a shift (TODO: Add role-based access).
     * @deny (delete) No one can delete a shift (TODO: Add role-based access).
     * @principle Inherits read access from the parent roster.
     */
    match /rosters/{rosterId}/shifts/{shiftId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add role-based access.
      allow update: if false; // TODO: Add role-based access.
      allow delete: if false; // TODO: Add role-based access.
    }

    /**
     * @description Allows anyone to read inventory items, but restricts writes.
     * @path /inventoryItems/{inventoryItemId}
     * @allow (get) Any user can read an inventory item.
     * @allow (list) Any user can list inventory items.
     * @deny (create) No one can create an inventory item (TODO: Add role-based access).
     * @deny (update) No one can update an inventory item (TODO: Add role-based access).
     * @deny (delete) No one can delete an inventory item (TODO: Add role-based access).
     * @principle Allows public read access with restricted writes.
     */
    match /inventoryItems/{inventoryItemId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add role-based access.
      allow update: if false; // TODO: Add role-based access.
      allow delete: if false; // TODO: Add role-based access.
    }

    /**
     * @description Manages inventory logs, accessible with item-level permissions.
     * @path /inventoryItems/{inventoryItemId}/inventoryLogs/{inventoryLogId}
     * @allow (get) Any user can read an inventory log.
     * @allow (list) Any user can list inventory logs for an item.
     * @deny (create) No one can create an inventory log (TODO: Add role-based access).
     * @deny (update) No one can update an inventory log (TODO: Add role-based access).
     * @deny (delete) No one can delete an inventory log (TODO: Add role-based access).
     * @principle Inherits read access from the parent inventory item.
     */
    match /inventoryItems/{inventoryItemId}/inventoryLogs/{inventoryLogId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add role-based access.
      allow update: if false; // TODO: Add role-based access.
      allow delete: if false; // TODO: Add role-based access.
    }

    /**
     * @description Allows anyone to read tasks, but restricts writes.
     * @path /tasks/{taskId}
     * @allow (get) Any user can read a task.
     * @allow (list) Any user can list tasks.
     * @deny (create) No one can create a task (TODO: Add role-based access).
     * @deny (update) No one can update a task (TODO: Add role-based access).
     * @deny (delete) No one can delete a task (TODO: Add role-based access).
     * @principle Allows public read access with restricted writes.
     */
    match /tasks/{taskId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add role-based access.
      allow update: if false; // TODO: Add role-based access.
      allow delete: if false; // TODO: Add role-based access.
    }

    /**
     * @description Allows employees to manage their own tasks.
     * @path /employees/{employeeId}/employeeTasks/{employeeTaskId}
     * @allow (create) User with uid 'user_abc' can create a task if employeeId == 'user_abc'.
     * @allow (get) User with uid 'user_abc' can read their own tasks (employeeId == 'user_abc').
     * @allow (list) User with uid 'user_abc' can list their own tasks (employeeId == 'user_abc').
     * @allow (update) User with uid 'user_abc' can update their tasks (employeeId == 'user_abc').
     * @allow (delete) User with uid 'user_abc' can delete their tasks (employeeId == 'user_abc').
     * @deny (create) User with uid 'user_def' cannot create a task for employeeId 'user_abc'.
     * @deny (get) User with uid 'user_def' cannot read tasks for employeeId 'user_abc'.
     * @deny (list) User with uid 'user_def' cannot list tasks for employeeId 'user_abc'.
     * @deny (update) User with uid 'user_def' cannot update tasks for employeeId 'user_abc'.
     * @deny (delete) User with uid 'user_def' cannot delete tasks for employeeId 'user_abc'.
     * @principle Enforces document ownership for writes.
     */
    match /employees/{employeeId}/employeeTasks/{employeeTaskId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(employeeId);
      allow list: if isSignedIn() && isOwner(employeeId);
      allow create: if isSignedIn() && isOwner(employeeId) && request.resource.data.employeeId == employeeId;
      allow update: if isExistingOwner(employeeId) && request.resource.data.employeeId == employeeId;
      allow delete: if isExistingOwner(employeeId);
    }

    /**
     * @description Allows anyone to read shift swap requests, but restricts writes.
     * @path /shiftSwapRequests/{shiftSwapRequestId}
     * @allow (get) Any user can read a shift swap request.
     * @allow (list) Any user can list shift swap requests.
     * @deny (create) No one can create a shift swap request (TODO: Add role-based access).
     * @deny (update) No one can update a shift swap request (TODO: Add role-based access).
     * @deny (delete) No one can delete a shift swap request (TODO: Add role-based access).
     * @principle Allows public read access with restricted writes.
     */
    match /shiftSwapRequests/{shiftSwapRequestId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add role-based access.
      allow update: if false; // TODO: Add role-based access.
      allow delete: if false; // TODO: Add role-based access.
    }
  }
}