/**
 * @fileoverview Firestore Security Rules for Paradise ScoopSmart.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for employee-specific data
 * and open read access for public data while ensuring only authenticated users can modify data.
 * The rules are designed to be simple and efficient by leveraging path-based authorization
 * and avoiding complex queries or data validation.
 *
 * Data Structure:
 * - /employees/{employeeId}: Stores personal employee data. Only the employee can read/write their own data.
 * - /rosters/{rosterId}/shifts/{shiftId}: Stores shifts associated with a roster.
 * - /inventoryItems/{inventoryItemId}/inventoryLogs/{inventoryLogId}: Stores logs of inventory changes.
 * - /tasks/{taskId}: Stores global tasks.
 * - /employees/{employeeId}/employeeTasks/{employeeTaskId}: Stores employee specific tasks. Only the employee can read/write their own data.
 * - /shiftSwapRequests/{shiftSwapRequestId}: Stores shift swap requests.
 *
 * Key Security Decisions:
 * - Employees can only access their own employee data.
 * - Listing operations on private user data are allowed only for the owner.
 * - No complex data validation is performed in this prototype.
 *
 * Denormalization for Authorization:
 * - The `Shift` document includes denormalized `employeeId` for direct authorization checks.
 * - The `ShiftSwapRequest` document includes `requestingEmployeeId` and `acceptingEmployeeId` to simplify authorization for shift swap operations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows employees to manage their own profile data.
     * @path /employees/{employeeId}
     * @allow (create) - Authenticated user can create their own employee document.
     * @allow (get, list, update, delete) - Authenticated user can read, update or delete their own employee document.
     * @deny (create, update, delete) - Authenticated user cannot create, update or delete other employee documents.
     * @principle Enforces document ownership based on the employeeId.
     */
    match /employees/{employeeId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(employeeId);
      allow list: if false;
      allow create: if isOwner(employeeId) && request.resource.data.id == employeeId;
      allow update: if isExistingOwner(employeeId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(employeeId);
    }

    /**
     * @description Manages rosters; access control to be determined.
     * @path /rosters/{rosterId}
     * @allow (get, list) - Public read access.
     * @deny (create, update, delete) - No write access allowed for prototyping.
     * @principle Demonstrates placeholder rules that require further access control definition.
     */
    match /rosters/{rosterId} {
        allow get, list: if true; // Public read access for prototyping.
        allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Manages shifts associated with a specific roster; access control to be determined.
     * @path /rosters/{rosterId}/shifts/{shiftId}
     * @allow (get, list) - Public read access.
     * @deny (create, update, delete) - No write access allowed for prototyping.
     * @principle Demonstrates placeholder rules that require further access control definition.
     */
    match /rosters/{rosterId}/shifts/{shiftId} {
        allow get, list: if true; // Public read access for prototyping.
        allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Manages inventory items; access control to be determined.
     * @path /inventoryItems/{inventoryItemId}
     * @allow (get, list) - Public read access.
     * @deny (create, update, delete) - No write access allowed for prototyping.
     * @principle Demonstrates placeholder rules that require further access control definition.
     */
    match /inventoryItems/{inventoryItemId} {
        allow get, list: if true; // Public read access for prototyping.
        allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Manages inventory logs for each inventory item; access control to be determined.
     * @path /inventoryItems/{inventoryItemId}/inventoryLogs/{inventoryLogId}
     * @allow (get, list) - Public read access.
     * @deny (create, update, delete) - No write access allowed for prototyping.
     * @principle Demonstrates placeholder rules that require further access control definition.
     */
    match /inventoryItems/{inventoryItemId}/inventoryLogs/{inventoryLogId} {
        allow get, list: if true; // Public read access for prototyping.
        allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Manages global tasks; access control to be determined.
     * @path /tasks/{taskId}
     * @allow (get, list) - Public read access.
     * @deny (create, update, delete) - No write access allowed for prototyping.
     * @principle Demonstrates placeholder rules that require further access control definition.
     */
    match /tasks/{taskId} {
        allow get, list: if true; // Public read access for prototyping.
        allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows employees to manage their own tasks.
     * @path /employees/{employeeId}/employeeTasks/{employeeTaskId}
     * @allow (create) - Authenticated user can create their own employee task.
     * @allow (get, list, update, delete) - Authenticated user can read, update or delete their own employee task.
     * @deny (create, update, delete) - Authenticated user cannot create, update or delete other employee tasks.
     * @principle Enforces document ownership based on the employeeId.
     */
    match /employees/{employeeId}/employeeTasks/{employeeTaskId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(employeeId);
      allow list: if isOwner(employeeId);
      allow create: if isOwner(employeeId) && request.resource.data.employeeId == employeeId;
      allow update: if isExistingOwner(employeeId) && request.resource.data.employeeId == resource.data.employeeId;
      allow delete: if isExistingOwner(employeeId);
    }

    /**
     * @description Manages shift swap requests; access control to be determined.
     * @path /shiftSwapRequests/{shiftSwapRequestId}
     * @allow (get, list) - Public read access.
     * @deny (create, update, delete) - No write access allowed for prototyping.
     * @principle Demonstrates placeholder rules that require further access control definition.
     */
    match /shiftSwapRequests/{shiftSwapRequestId} {
        allow get, list: if true; // Public read access for prototyping.
        allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }
  }
}