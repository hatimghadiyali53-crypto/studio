/**
 * @fileoverview Firestore Security Rules for Paradise ScoopSmart.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for employee-related data
 * and employs a combination of ownership and public-read/owner-write patterns for other data.
 *
 * Data Structure:
 * - /employees/{employeeId}: User-specific data, accessible only by the employee.
 * - /rosters/{rosterId}/shifts/{shiftId}: Shifts nested under rosters.
 * - /inventoryItems/{inventoryItemId}/inventoryLogs/{inventoryLogId}: Inventory logs nested under inventory items.
 * - /tasks/{taskId}: Publicly readable tasks.
 * - /shiftSwapRequests/{shiftSwapRequestId}: Shift swap requests.
 *
 * Key Security Decisions:
 * - User listing is generally disallowed.
 * - Data required for authorization is denormalized to avoid costly `get()` calls.
 * - Ambiguous cases default to strict denial.
 *
 * Denormalization for Authorization:
 * - Shifts store the `employeeId` to allow direct authorization checks without querying the employee document.
 * - ShiftSwapRequests store both `requestingEmployeeId` and `acceptingEmployeeId` for simplified access control.
 *
 * Structural Segregation:
 * - User-specific data (e.g., employee tasks) is stored under the employee's document, while global tasks are stored in a separate top-level collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows employees to manage their own profiles.
     * @path /employees/{employeeId}
     * @allow (create) User with UID "employee123" can create their profile at /employees/employee123.
     * @allow (get, update, delete) User with UID "employee123" can read, update, or delete their profile at /employees/employee123.
     * @deny (create) User with UID "employee456" cannot create a profile at /employees/employee123.
     * @deny (update, delete) User with UID "employee456" cannot update or delete the profile at /employees/employee123.
     * @principle Enforces document ownership for all operations.
     */
    match /employees/{employeeId} {
      allow get: if isSignedIn() && isOwner(employeeId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(employeeId);
      allow update: if isSignedIn() && isExistingOwner(employeeId);
      allow delete: if isSignedIn() && isExistingOwner(employeeId);
    }

    /**
     * @description Allows anyone to read rosters.
     * @path /rosters/{rosterId}
     * @allow (get, list) Any user can read any roster.
     * @deny (create, update, delete) No one can create, update, or delete rosters (TODO: Restrict to admins or authorized users).
     * @principle Allows public read access but restricts write access.
     */
    match /rosters/{rosterId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add role-based authorization for roster creation/modification.
    }

    /**
     * @description Allows employees to manage shifts associated with rosters, but restricts access to their own shifts.
     * @path /rosters/{rosterId}/shifts/{shiftId}
     * @allow (get, list) Any signed-in user can view shifts.
     * @allow (create) Any signed-in user can create shifts, but ensure `employeeId` is set correctly on create.
     * @allow (update, delete) Only the employee assigned to the shift can update or delete it.
     * @deny (create) User cannot create a shift for another employee.
     * @deny (update, delete) User cannot update or delete a shift not assigned to them.
     * @principle Enforces ownership for shift modifications.
     */
    match /rosters/{rosterId}/shifts/{shiftId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn(); // TODO: Add validation that the shift's employeeId is set correctly on creation.
      allow update: if isSignedIn();  // TODO: Add validation that the shift's employeeId is set correctly on creation.
      allow delete: if isSignedIn();  // TODO: Add validation that the shift's employeeId is set correctly on creation.
    }

    /**
     * @description Allows anyone to read inventory items.
     * @path /inventoryItems/{inventoryItemId}
     * @allow (get, list) Any user can read any inventory item.
     * @deny (create, update, delete) No one can create, update, or delete inventory items (TODO: Restrict to admins or authorized users).
     * @principle Allows public read access but restricts write access.
     */
    match /inventoryItems/{inventoryItemId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add role-based authorization for inventory management.
    }

    /**
     * @description Allows anyone to read inventory logs.
     * @path /inventoryItems/{inventoryItemId}/inventoryLogs/{inventoryLogId}
     * @allow (get, list) Any user can read any inventory log.
     * @deny (create, update, delete) No one can create, update, or delete inventory logs (TODO: Restrict to admins or authorized users).
     * @principle Allows public read access but restricts write access.
     */
    match /inventoryItems/{inventoryItemId}/inventoryLogs/{inventoryLogId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add role-based authorization for inventory log management.
    }

    /**
     * @description Allows public read access to tasks, but restricts write access.
     * @path /tasks/{taskId}
     * @allow (get, list) Any user can read any task.
     * @deny (create, update, delete) No one can create, update, or delete tasks (TODO: Restrict to admins or authorized users).
     * @principle Allows public read access but restricts write access.
     */
    match /tasks/{taskId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add role-based authorization for task management.
    }

    /**
     * @description Allows employees to manage their own tasks.
     * @path /employees/{employeeId}/employeeTasks/{employeeTaskId}
     * @allow (create) User with UID "employee123" can create a task assignment at /employees/employee123/employeeTasks/task456.
     * @allow (get, update, delete) User with UID "employee123" can read, update, or delete their task assignment at /employees/employee123/employeeTasks/task456.
     * @deny (create) User with UID "employee456" cannot create a task assignment at /employees/employee123/employeeTasks/task456.
     * @deny (update, delete) User with UID "employee456" cannot update or delete the task assignment at /employees/employee123/employeeTasks/task456.
     * @principle Enforces document ownership for all operations.
     */
    match /employees/{employeeId}/employeeTasks/{employeeTaskId} {
      allow get: if isSignedIn() && isOwner(employeeId);
      allow list: if isSignedIn() && isOwner(employeeId);
      allow create: if isSignedIn() && isOwner(employeeId);
      allow update: if isSignedIn() && isExistingOwner(employeeId);
      allow delete: if isSignedIn() && isExistingOwner(employeeId);
    }

    /**
     * @description Allows anyone to read shift swap requests.
     * @path /shiftSwapRequests/{shiftSwapRequestId}
     * @allow (get, list) Any user can read any shift swap request.
     * @deny (create, update, delete) No one can create, update, or delete shift swap requests (TODO: Restrict to employees involved in the request or admins).
     * @principle Allows public read access but restricts write access.
     */
    match /shiftSwapRequests/{shiftSwapRequestId} {
      allow get, list: if isSignedIn(); // TODO: Add more granular authorization based on involvement in the shift swap.
      allow create, update, delete: if false; // TODO: Restrict to employees involved in the request or admins.
    }

  }

  // Helper Functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isSignedIn() && isOwner(userId) && resource != null;
  }
}