/**
 * @fileoverview Firestore Security Rules for Paradise ScoopSmart.
 *
 * Core Philosophy:
 * This ruleset prioritizes a secure, scalable, and maintainable database by enforcing strict
 * access control and leveraging denormalization to avoid costly `get()` calls. It enforces
 * authorization independence to ensure robust security rules and atomic operations.
 *
 * Data Structure:
 * - /employees/{employeeId}: Stores employee profiles, acting as the root for user-specific data.
 * - /rosters/{rosterId}: Stores rosters.
 * - /rosters/{rosterId}/shifts/{shiftId}: Stores shifts associated with rosters, denormalizing `employeeId` for easy retrieval.
 * - /inventoryItems/{inventoryItemId}: Stores inventory items.
 * - /inventoryItems/{inventoryItemId}/inventoryLogs/{inventoryLogId}: Stores inventory logs for inventory items.
 * - /tasks/{taskId}: Stores global tasks.
 * - /employees/{employeeId}/employeeTasks/{employeeTaskId}: Stores tasks assigned to employees.
 * - /shiftSwapRequests/{shiftSwapRequestId}: Stores shift swap requests, denormalizing `requestingEmployeeId` and `acceptingEmployeeId`.
 *
 * Key Security Decisions:
 * - User-owned data is placed under `/employees/{employeeId}` to simplify ownership checks.
 * - Public listing is disallowed for collections containing private data.
 * - All write operations require authentication and authorization.
 *
 * Denormalization for Authorization:
 * - `Shift` documents denormalize `employeeId` to enable direct authorization checks without `get()` calls.
 * - `ShiftSwapRequest` documents denormalize `requestingEmployeeId` and `acceptingEmployeeId` for efficient request management.
 *
 * Structural Segregation:
 * - User-specific private data is stored under `/employees/{employeeId}`, while shared or global data resides in top-level collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages employee profiles.
     * @path /employees/{employeeId}
     * @allow (create) - Authenticated user can create their own employee profile if the employeeId matches their UID.
     * @allow (get, update, delete) - Authenticated user can only get, update, and delete their own employee profile.
     * @deny (create) - Authenticated user cannot create an employee profile for another user.
     * @deny (update, delete) - Authenticated user cannot update or delete another user's employee profile.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /employees/{employeeId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(employeeId);
      allow list: if false; // Listing all employees is not permitted.
      allow create: if isOwner(employeeId) && request.resource.data.id == employeeId;
      allow update: if isExistingOwner(employeeId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(employeeId);
    }

    /**
     * @description Manages employee rosters.
     * @path /rosters/{rosterId}
     * @allow (get, list) - Public access to retrieve and list rosters.
     * @allow (create) - Only authenticated users can create rosters.
     * @allow (update, delete) - Only the creator can update or delete a roster.
     * @deny (create) - Unauthenticated users cannot create rosters.
     * @deny (update, delete) - Non-creators cannot update or delete rosters.
     * @principle Allows public read access while restricting write access to owners.
     */
    match /rosters/{rosterId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Manages shifts associated with rosters.
     * @path /rosters/{rosterId}/shifts/{shiftId}
     * @allow (get, list) - Public access to retrieve and list shifts.
     * @allow (create) - Only authenticated users can create shifts.
     * @allow (update, delete) - Only the creator can update or delete a shift.
     * @deny (create) - Unauthenticated users cannot create shifts.
     * @deny (update, delete) - Non-creators cannot update or delete shifts.
     * @principle Allows public read access while restricting write access to owners.
     */
    match /rosters/{rosterId}/shifts/{shiftId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Manages inventory items.
     * @path /inventoryItems/{inventoryItemId}
     * @allow (get, list) - Public access to retrieve and list inventory items.
     * @allow (create) - Only authenticated users can create inventory items.
     * @allow (update, delete) - Only the creator can update or delete an inventory item.
     * @deny (create) - Unauthenticated users cannot create inventory items.
     * @deny (update, delete) - Non-creators cannot update or delete inventory items.
     * @principle Allows public read access while restricting write access to owners.
     */
    match /inventoryItems/{inventoryItemId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Manages inventory logs for each item.
     * @path /inventoryItems/{inventoryItemId}/inventoryLogs/{inventoryLogId}
     * @allow (get, list) - Public access to retrieve and list inventory logs.
     * @allow (create) - Only authenticated users can create inventory logs.
     * @allow (update, delete) - Only the creator can update or delete an inventory log.
     * @deny (create) - Unauthenticated users cannot create inventory logs.
     * @deny (update, delete) - Non-creators cannot update or delete inventory logs.
     * @principle Allows public read access while restricting write access to owners.
     */
    match /inventoryItems/{inventoryItemId}/inventoryLogs/{inventoryLogId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Manages global tasks.
     * @path /tasks/{taskId}
     * @allow (get, list) - Public access to retrieve and list tasks.
     * @allow (create) - Only authenticated users can create tasks.
     * @allow (update, delete) - Only the creator can update or delete a task.
     * @deny (create) - Unauthenticated users cannot create tasks.
     * @deny (update, delete) - Non-creators cannot update or delete tasks.
     * @principle Allows public read access while restricting write access to owners.
     */
    match /tasks/{taskId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Manages tasks assigned to specific employees.
     * @path /employees/{employeeId}/employeeTasks/{employeeTaskId}
     * @allow (create) - Authenticated user can create an employee task if the employeeId matches their UID.
     * @allow (get, list, update, delete) - Authenticated user can only get, list, update, and delete their own employee tasks.
     * @deny (create) - Authenticated user cannot create an employee task for another user.
     * @deny (update, delete) - Authenticated user cannot update or delete another user's employee task.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /employees/{employeeId}/employeeTasks/{employeeTaskId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(employeeId);
      allow list: if isOwner(employeeId);
      allow create: if isOwner(employeeId) && request.resource.data.employeeId == employeeId;
      allow update: if isExistingOwner(employeeId) && request.resource.data.employeeId == resource.data.employeeId;
      allow delete: if isExistingOwner(employeeId);
    }

    /**
     * @description Manages shift swap requests.
     * @path /shiftSwapRequests/{shiftSwapRequestId}
     * @allow (get, list) - Public access to retrieve and list shift swap requests.
     * @allow (create) - Only authenticated users can create shift swap requests.
     * @allow (update, delete) - Only the creator can update or delete a shift swap request.
     * @deny (create) - Unauthenticated users cannot create shift swap requests.
     * @deny (update, delete) - Non-creators cannot update or delete shift swap requests.
     * @principle Allows public read access while restricting write access to owners.
     */
    match /shiftSwapRequests/{shiftSwapRequestId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }
  }
}