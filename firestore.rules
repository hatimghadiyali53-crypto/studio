/**
 * @fileoverview Firestore Security Rules for Paradise ScoopSmart.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure data access based on role-based authorization.
 * Employee records and related data are protected, and inventory data is publicly readable but only writable by authorized users.
 *
 * Data Structure:
 * The Firestore database is structured with top-level collections for employees, tasks, inventory items, roster schedules, and attendance records.
 * - /employees/{employeeId}: Stores employee profiles.
 * - /tasks/{taskId}: Stores tasks assigned to employees.
 * - /inventoryItems/{inventoryItemId}: Stores inventory items.
 * - /roster/{rosterId}: Stores weekly roster schedules.
 * - /attendance/{attendanceId}: Stores attendance records.
 *
 * Key Security Decisions:
 * - Employees can only read/write their own records, managers have broader access.
 * - Inventory items are publicly readable, but only managers can modify them.
 * - All write operations require user authentication.
 * - Data validation is relaxed in this prototyping phase, focusing on authorization and relational integrity.
 *
 * Denormalization for Authorization:
 *  None. Role based authorization is not implemented in this prototyping stage. Access is granted to all signed in users.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows access to employee profiles.
     * @path /employees/{employeeId}
     * @allow (read) Authenticated user can read any employee document.
     * @allow (create) Authenticated user can create an employee document.
     * @allow (update) Authenticated user can update any employee document.
     * @allow (delete) Authenticated user can delete any employee document.
     * @deny (read) Non-authenticated user cannot read employee documents.
     * @deny (write) Non-authenticated user cannot write employee documents.
     * @principle Authenticated user can perform all CRUD operations.
     */
    match /employees/{employeeId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows access to tasks.
     * @path /tasks/{taskId}
     * @allow (read) Authenticated user can read any task document.
     * @allow (create) Authenticated user can create a task document.
     * @allow (update) Authenticated user can update any task document.
     * @allow (delete) Authenticated user can delete any task document.
     * @deny (read) Non-authenticated user cannot read task documents.
     * @deny (write) Non-authenticated user cannot write task documents.
     * @principle Authenticated user can perform all CRUD operations.
     */
    match /tasks/{taskId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows read access to inventory items for all users, but restricts write access to managers.
     * @path /inventoryItems/{inventoryItemId}
     * @allow (read) Any user can read inventory items.
     * @allow (create) Authenticated user can create an inventory item document.
     * @allow (update) Authenticated user can update any inventory item document.
     * @allow (delete) Authenticated user can delete any inventory item document.
     * @deny (write) Non-authenticated user cannot write inventory documents.
     * @principle Public read access with authenticated-only writes.
     */
    match /inventoryItems/{inventoryItemId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows access to roster schedules.
     * @path /roster/{rosterId}
     * @allow (read) Authenticated user can read any roster document.
     * @allow (create) Authenticated user can create a roster document.
     * @allow (update) Authenticated user can update any roster document.
     * @allow (delete) Authenticated user can delete any roster document.
     * @deny (read) Non-authenticated user cannot read roster documents.
     * @deny (write) Non-authenticated user cannot write roster documents.
     */
    match /roster/{rosterId} {
        allow get: if isSignedIn();
        allow list: if isSignedIn();
        allow create: if isSignedIn();
        allow update: if isSignedIn();
        allow delete: if isSignedIn();
    }

    /**
     * @description Allows access to attendance records.
     * @path /attendance/{attendanceId}
     * @allow (read) Authenticated user can read any attendance document.
     * @allow (create) Authenticated user can create an attendance document.
     * @allow (update) Authenticated user can update any attendance document.
     * @allow (delete) Authenticated user can delete any attendance document.
     * @deny (read) Non-authenticated user cannot read attendance documents.
     * @deny (write) Non-authenticated user cannot write attendance documents.
     */
    match /attendance/{attendanceId} {
        allow get: if isSignedIn();
        allow list: if isSignedIn();
        allow create: if isSignedIn();
        allow update: if isSignedIn();
        allow delete: if isSignedIn();
    }
  }

  // Helper function to determine if a user is signed in
  function isSignedIn() {
    return request.auth != null;
  }
}