rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages employee profiles, restricting access based on user roles.
     * @path /employees/{employeeId}
     * @allow (read): If the user is authenticated.
     * @allow (create): If the user is an admin or the employeeId matches the authenticated user's ID.
     * @allow (update, delete): If the user is an admin.
     * @deny (create, update, delete): If the user is not an admin.
     * @principle Role-based access control.
     */
    match /employees/{employeeId} {
      allow get: if isSignedIn();
      allow list: if false; // Listing all employees is restricted for privacy

      allow create: if isAdmin() || (isSignedIn() && request.auth.uid == employeeId);
      allow update, delete: if isAdmin();
    }

    /**
     * @description Manages tasks, allowing read access to all authenticated users but restricting writes to admins.
     * @path /tasks/{taskId}
     * @allow (get, list): Any authenticated user can read tasks.
     * @allow (create, update, delete): Only admins can create, update, or delete tasks.
     * @deny (create, update, delete): If the user is not an admin.
     * @principle Public read, restricted write.
     */
    match /tasks/{taskId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Manages inventory items, allowing read access to all authenticated users but restricting writes to admins.
     * @path /inventoryItems/{inventoryItemId}
     * @allow (get, list): Any authenticated user can read inventory items.
     * @allow (create, update, delete): Only admins can create, update, or delete inventory items.
     * @deny (create, update, delete): If the user is not an admin.
     * @principle Public read, restricted write.
     */
    match /inventoryItems/{inventoryItemId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Manages roster schedules, allowing read access to all authenticated users but restricting writes to admins.
     * @path /roster/{rosterId}
     * @allow (get, list): Any authenticated user can read roster schedules.
     * @allow (create, update, delete): Only admins can create, update, or delete roster schedules.
     * @deny (create, update, delete): If the user is not an admin.
     * @principle Public read, restricted write.
     */
    match /roster/{rosterId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Manages attendance records, allowing read access to all authenticated users but restricting writes to admins.
     * @path /attendance/{attendanceId}
     * @allow (get, list): Any authenticated user can read attendance records.
     * @allow (create, update, delete): Only admins can create, update, or delete attendance records.
     * @deny (create, update, delete): If the user is not an admin.
     * @principle Public read, restricted write.
     */
    match /attendance/{attendanceId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }

    // --- Helper Functions ---

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is an admin.  This prototype does not have
     * a defined admin role and so this is a stub.  This SHOULD NOT go to production
     * without a real implementation of an admin check.
     * @return {boolean} Always false in this prototype.
     */
    function isAdmin() {
        return false;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId The user ID to compare against.
     * @return {boolean} True if the user ID matches the authenticated user's ID, false otherwise.
     */
    function isOwner(employeeId) {
      return request.auth.uid == employeeId;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID and resource exists.
     * @param {string} userId The user ID to compare against.
     * @return {boolean} True if the user ID matches the authenticated user's ID, false otherwise.
     */
    function isExistingOwner(employeeId) {
      return request.auth.uid == employeeId && resource != null;
    }
  }
}